generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Coupon {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  couponCode String?
  isActive   Boolean
  expiryDate DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Banner {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  link      String?
  imageUrl  String?
  isActive  Boolean
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String 
  slug        String @unique
  imageUrl    String
  description String
  isActive    Boolean   

  marketId    String @db.ObjectId
  market      Market @relation(fields: [marketId], references: [id])
  
  products    Product[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
}

model Market {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String     
  slug        String    @unique
  logoUrl     String?
  description String?
  isActive    Boolean
  
  categories  Category[] 

  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
}

model Product {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  barcode         String?
  boxes           Int
  description     String?
  discount        Int?
  discountedPrice Float
  life            String?
  offers          String?
  packets_box_peti  String?
  no_piece        Int?
  piece_price     Int?
  packets_per_box Int
  productCode     String    @unique
  product_price   Int
  title           String   
  slug            String    
  totalPackets    Float
  imageUrl        String?
  productImages   String[]
  isActive        Boolean
  sku             String?
  unit            String
  tags            String[]

  // Relation field
  categoryId      String?    @db.ObjectId
  category        Category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  //userId        String     @db.ObjectId
  //user          User       @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  

  
  WholesalerProfileId    String @db.ObjectId
  WholesalerProfile      User @relation(fields: [WholesalerProfileId], references: [id],  onDelete: Cascade, onUpdate: Cascade)

  orderItems     OrderItem[]
  sales          Sale[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime? @updatedAt
}

enum UserRole {
  ADMIN
  WHOLESALER
  KIRANA
  MODERATOR
}


enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  emailVerified Boolean   @default(false)
  gstNumber     String?
  role          UserRole  @default(KIRANA)
  verificationToken String?
  products      Product[]
  sales               Sale[]
  status         Boolean   @default(false)
  wholesalerProfile WholesalerProfile?
  profile           KiranaProfile?
  order           Order[]  // User can have multiple orders
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

}


model KiranaProfile {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  userId          String  @unique @db.ObjectId
  name            String
  storeName       String?
  phone           String?
  email           String
  storeAddress    String
  adharNumber     String? 
  panNumber       String? 
  storeGstNumber  String? 
  profileImageUrl String

  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model WholesalerProfile {
  id                          String    @id @default(auto()) @map("_id") @db.ObjectId
  address                     String
  code                        String
  profileImageUrl             String
  email                       String   @unique
  name                        String
  phone                       String
  storeName                   String
  storeAddress                String?
  storePhoneNumber            String
  wholesalerAdharNumber       String @unique
  wholesalerPanNumber         String @unique
  wholesalerStoreGstNumber    String @unique
  isActive                    Boolean
  
  user                        User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                      String @db.ObjectId @unique

  createdAt                   DateTime @default(now())
  updatedAt                   DateTime? @updatedAt
}

model Order {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String    @db.ObjectId
  orderNumber String?
  // Kirana Store details
  storename      String
  phoneNumber    String
  streetAddress  String
  city           String
  state        String
  zipCode        String
  shippingCost   Float?
  // Payment Method
  paymentMethod  String

  // Order items
  orderItems     OrderItem[]
  sales          Sale[]
  orderStatus    OrderStatus @default(PROCESSING)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model OrderItem {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String    @db.ObjectId
  productId   String    @db.ObjectId
  vendorId    String    @db.ObjectId
  imageUrl    String?
  title       String?
  
  quantity    Int
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product     Product   @relation(fields: [productId], references: [id],onDelete: Cascade, onUpdate: Cascade)
}



model Sale {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId            String   @db.ObjectId
  productId          String   @db.ObjectId
  vendorId  String   @db.ObjectId
  total     Float

  productTitle       String
  productPrice       Float
  imageUrl           String
  productQty         Int 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vendor    User   @relation(fields: [vendorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}